import{o as n,c as a,d as s}from"./app.146ab500.js";const e='{"title":"函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"def","slug":"def"},{"level":2,"title":"函数调用","slug":"函数调用"},{"level":2,"title":"返回值","slug":"返回值"},{"level":2,"title":"任意个数参数","slug":"任意个数参数"},{"level":2,"title":"任意各数字典参数","slug":"任意各数字典参数"},{"level":2,"title":"知识点","slug":"知识点"}],"relativePath":"tutorial/function.md","lastUpdated":1620545091167}',o={},t=s('<h1 id="函数"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><p>通过定义函数我们可以实现代码块的复用。本节详细讲解函数的使用。</p><h2 id="def"><a class="header-anchor" href="#def" aria-hidden="true">#</a> def</h2><p>采用 <code>def</code> 定义函数</p><div class="language-"><pre><code>def &lt;函数名&gt;(参数[=默认值1],...):\n    函数体\n</code></pre></div><p>例如:</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token string">&#39;morning&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token operator">+</span><span class="token string">&quot; &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="函数调用"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h2><p>定义的函数可以采用如下三种方式调用</p><ol><li>直接调用 <code>hi(&#39;tom&#39;,&#39;morning&#39;)</code></li><li>关键字调用 <code>hi(time=&#39;morning&#39;，name=&#39;tom&#39;,)</code><blockquote><p>注意关键字调用可以不按照参数顺序赋值参数</p></blockquote></li></ol><h2 id="返回值"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h2><p>默认函数返回 <code>None</code> 可以利用 <code>return</code> 语句返回参数,参见示例</p><div class="language-py"><pre><code><span class="token comment"># 携带返回值的函数</span>\n<span class="token keyword">def</span> <span class="token function">fullname</span><span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> middlename<span class="token punctuation">,</span> lastname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    fullname <span class="token operator">=</span> firstname <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> middlename<span class="token operator">+</span><span class="token string">&#39; &#39;</span> <span class="token operator">+</span> lastname\n    <span class="token keyword">return</span> fullname<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>fullname<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lee&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hooker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="任意个数参数"><a class="header-anchor" href="#任意个数参数" aria-hidden="true">#</a> 任意个数参数</h2><p>采用 <code>*形参名</code> 可以支持传入变参,传入的参数以元组方式存储</p><div class="language-py"><pre><code><span class="token comment"># 实现多个参数的传入</span>\n<span class="token keyword">def</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;name:&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n\n\nshow_name<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;locke&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="任意各数字典参数"><a class="header-anchor" href="#任意各数字典参数" aria-hidden="true">#</a> 任意各数字典参数</h2><p>采用 <code>**形参名</code> 可以支持关键字参数传入</p><div class="language-py"><pre><code><span class="token comment"># 实现 map 数组传入</span>\n<span class="token keyword">def</span> <span class="token function">user_profile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> age<span class="token punctuation">}</span>\n    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n    <span class="token keyword">return</span> user\n\nuser <span class="token operator">=</span> user_profile<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&#39;berlin&#39;</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">&#39;man&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n</code></pre></div><h2 id="知识点"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ul><li>函数属性，详见 <a href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="noopener noreferrer">函数属性</a></li><li>[ ] 函数格式<div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">&gt;</span><span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n   <span class="token comment"># 可选内容</span>\n   <span class="token triple-quoted-string string">&quot;&quot;&quot;\n   函数文档\n   &quot;&quot;&quot;</span>\n   函数体\n</code></pre></div></li><li>[ ] 作用域搜索顺序 <ul><li>[ ] 函数内变量</li><li>[ ] 全局变量</li><li>[ ] 内建变量</li><li>[ ] 采用 global 定义全局变量</li><li>[ ] 采用 nonlocal 表示引用全局变量，而非局部变量</li></ul></li><li>[ ] return <ul><li>[ ] 函数默认返回 <code>None</code></li><li>[ ] return 返回斐波那契数组</li></ul></li><li>[ ] 参数定义 <ul><li>[ ] 定位参数 <code>arg1 = default1, arg2 = default2, ...</code><ul><li>[ ] 调用的参数可以只传入部分</li><li>[ ] 参数只在初次初始化有效</li><li>[ ] 参数为对象时，会导致值的累加，可采用 None 清空数据</li></ul></li><li>[ ] keyword arguments, 利用参数名指定参数 <ul><li>[ ] 关键字参数必须在定位参数之后</li><li>[ ] 定义 <code>*arg</code> 提取所有剩余的定位参数</li><li>[ ] 定义 <code>**arg</code> 提取所有剩余的关键字参数</li><li>[ ] <code>**arg</code> 必须在 <code>*arg</code> 之后</li></ul></li><li>[ ] 显示申明定位参数和关键字参数的传入, <code>/,*</code> 用于限制函数的调用方式 <ul><li>[ ] 默认先定位参数，后接关键字参数</li><li>[ ] <code>/</code> 可选后接定位参数， <ul><li>[ ] 若出现在定位参数之后会限制函数只接收定位参数</li><li>[ ] 利用 <code>/</code> 解决 <code>**</code> 字典参数导致的传值冲突</li></ul></li><li>[ ] <code>*</code> 可选后接关键字参数 <ul><li>[ ] 若出现在开头则限制函数只接受关键字参数</li><li>[ ] 收拢参数列表 <code>Arbitrary Argument Lists</code> 后续只能接关键字参数</li></ul><div class="language-"><pre><code>def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n-----------    ----------     ----------\n  |             |                  |\n  |        Positional or keyword   |\n  |                                - Keyword only\n   -- Positional only\n</code></pre></div></li></ul></li><li>参数传入 <ul><li><code>*tuple</code> 实现元组的分别传入</li><li><code>*map</code> 实现字典拆解为关键字参数逐一传入</li></ul></li></ul></li><li>[ ] <code>lambda arg1,arg2...: expression</code> 定义 lambda 表达式</li><li>[ ] 函数属性 <ul><li>[ ] <code>__doc__</code> 约定 <ul><li>[ ] 首行为概述</li><li>[ ] 空行后描述功能</li></ul></li><li>[ ] <code>函数注解</code><ul><li>[ ] <code>arg: literal</code> 注解参数</li><li>[ ] <code> -&gt; literal</code> 注解返回值</li><li>[ ] <code>.__anotations__</code> 返回注解</li></ul></li></ul></li><li>[ ] 编码风格 <ul><li>[ ] pep8</li><li>[ ] 4 空格缩进</li><li>[ ]</li></ul></li></ul>',21);o.render=function(s,e,o,p,l,c){return n(),a("div",null,[t])};export default o;export{e as __pageData};
