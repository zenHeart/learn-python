import{o as e,c as l,d as o}from"./app.146ab500.js";const i='{"title":"错误和异常","description":"","frontmatter":{},"headers":[{"level":2,"title":"知识点","slug":"知识点"}],"relativePath":"tutorial/error-exception.md","lastUpdated":1620545091167}',r={},c=o('<h1 id="错误和异常"><a class="header-anchor" href="#错误和异常" aria-hidden="true">#</a> 错误和异常</h1><h2 id="知识点"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ul><li><code>Syntax error</code> 是解释器解析源码时的报错</li><li><code>Exceptions</code> 异常是程序在运行时产生的错误 <ul><li>异常有不同的类型, 详细的内建异常参考 <a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener noreferrer">built in exception</a><ul><li><code>NameError</code></li></ul></li><li><code>except (Err1,Err2) :</code> 支持元组捕获错误</li><li><code>except &lt;Exception&gt; as instance:</code> 提取异常实例</li><li><code>except class:</code> 若子类继承父类则也会匹配父类判断</li><li><code>except :</code> 表示通配</li><li><code>Exception()</code> 创建一个异常类 <ul><li>args 包含传入的异常参数</li><li>exception 可以捕获嵌套内容抛出的异常</li></ul></li><li>内建异常的处理 <a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener noreferrer">bltin exception</a></li><li>自定义异常对象，详见 <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" target="_blank" rel="noopener noreferrer">user define exception</a></li></ul></li><li><code>else:</code> 子句用于无错误是的处理，例如读取文件</li><li><code>raise</code> 抛出一个异常 <ul><li><code>raise ValueError</code> 等效于 <code>raise ValueError()</code></li><li><code>raise NameError</code></li><li><code>rais &lt;异常&gt; from &lt;exceptions&gt;</code> 将内部异常转换为其他异常对象</li></ul></li><li><code>finally:</code> 子句 <ul><li>异常捕获后触发 finally, 未捕获则执行完 finally 后继续抛出</li><li>若 <code>exception:</code> 或 <code>else:</code> 字句执行抛出错误，则执行完 <code>finally</code> 后错误继续抛出</li><li><code>finally:</code> 包含 <code>break,continue,return</code> 语句，异常会被忽略</li><li><code>try</code> 语句中包含 <code>break,continue,return</code> <code>finally</code> 会在推出之前执行</li><li><code>finally</code> 语句中的 return 值会覆盖<code>try</code> 语句的 return 值</li><li><code>finally</code> 在实际编程中常用来处理 <code>文件或网络</code> 资源的释放</li></ul></li></ul>',3);r.render=function(o,i,r,t,d,n){return e(),l("div",null,[c])};export default r;export{i as __pageData};
