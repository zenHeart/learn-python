import{o as n,c as s,d as a}from"./app.146ab500.js";const p='{"title":"类","description":"","frontmatter":{},"headers":[{"level":2,"title":"面向对象编程基础","slug":"面向对象编程基础"},{"level":2,"title":"类的定义","slug":"类的定义"},{"level":3,"title":"实例化","slug":"实例化"},{"level":3,"title":"_init_","slug":"init"},{"level":3,"title":"实例属性和类属性","slug":"实例属性和类属性"},{"level":3,"title":"方法","slug":"方法"},{"level":3,"title":"其他属性","slug":"其他属性"},{"level":3,"title":"可迭代实例","slug":"可迭代实例"},{"level":2,"title":"知识点","slug":"知识点"}],"relativePath":"tutorial/class.md","lastUpdated":1761808228100}',t={},o=a('<h1 id="类"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h1><h2 id="面向对象编程基础"><a class="header-anchor" href="#面向对象编程基础" aria-hidden="true">#</a> 面向对象编程基础</h2><h2 id="类的定义"><a class="header-anchor" href="#类的定义" aria-hidden="true">#</a> 类的定义</h2><p>采用如下语法定义类</p><div class="language-"><pre><code>class ClassName:\n   &lt;statement-1&gt;\n   ...\n   &lt;statement-n&gt;\n</code></pre></div><p>参看示例</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 直接调用类方法</span>\nC1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>可以直接在 class 中使用 <code>if, for</code> 等语句。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token comment"># 这些语句会在文件执行时触发</span>\n   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>\n   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n   <span class="token keyword">if</span> __module__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span>      </code></pre></div><h3 id="实例化"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h3><p>采用 <code>ClassName()</code> 方式实例化类</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token comment"># self 表示实例化的类对象</span>\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\nc1 <span class="token operator">=</span> C1<span class="token punctuation">(</span><span class="token punctuation">)</span>\nc1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>采用 c1.hi() 的方式调用类方法，解释器会按照C1.hi(c1) 的方式处理，所以一般在定义类的方法时，首个参数限定为实例自身，通常采用<code>self</code> 表示。</p></div><h3 id="init"><a class="header-anchor" href="#init" aria-hidden="true">#</a> <strong>init</strong></h3><p>通常会采用 <code>__init__</code> 方法，在实例化类时， 初始化类的相关参数。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token comment"># 初始化实例对象的属性</span>\n      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n      self<span class="token punctuation">.</span>age <span class="token operator">=</span> age\n   <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> eat&quot;</span></span><span class="token punctuation">)</span>\n\n<span class="token comment"># 实例化 person 创建 tom 的信息</span>\ntom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age:</span><span class="token interpolation"><span class="token punctuation">{</span>tom<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment"># tom, age: 10</span>\ntom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># tom eat</span>\n\n<span class="token comment"># 实例化 person 创建 jack 的信息</span>\njack <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>jack<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age:</span><span class="token interpolation"><span class="token punctuation">{</span>jack<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment"># jack, age: 3</span>\njack<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># jack eat</span>\n</code></pre></div><h3 id="实例属性和类属性"><a class="header-anchor" href="#实例属性和类属性" aria-hidden="true">#</a> 实例属性和类属性</h3><p><code>self.name,self.age</code> 属于实例属性。 可以直接在类上定义共有的属性。该属性所有实例共享。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>\n   <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">&#39;C&#39;</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> foo\n\n<span class="token comment"># 可以直接在类上引用该属性</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token comment"># C</span>\n\nc1 <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token string">&#39;c1&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># 实例属性覆盖类同名属性</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token comment"># c1</span>\n\nc2 <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token string">&#39;c2&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># 实例属性覆盖类同名属性</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token comment"># c2</span>\n\n\n</code></pre></div><p>当在类的实例上定义了和类属性同名的变量时，解释器会优先返回实例上定义的变量。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>\n   <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">&#39;person&#39;</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token comment"># 初始化实例对象的属性</span>\n      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n      self<span class="token punctuation">.</span>age <span class="token operator">=</span> age\n   <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> eat&quot;</span></span><span class="token punctuation">)</span>\n\n<span class="token comment"># 可以直接在类上引用该属性</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token comment"># person</span>\n\n<span class="token comment"># 实例化 person 创建 tom 的信息</span>\ntom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token comment"># 也可直接在实例上访问类属性</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token comment"># person</span>\ntom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># tom eat</span>\n\n<span class="token comment"># 实例化 person 创建 jack 的信息</span>\njack <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token comment"># 也可直接在实例上访问类属性</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>jack<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token comment"># person</span>\njack<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># jack eat</span>\n\n</code></pre></div><h3 id="方法"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>类中定义的函数可以通过类或者实例采用 <code>.</code> 号进行调用。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;hi </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n\nc1 <span class="token operator">=</span> C1<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>\ng <span class="token operator">=</span> c1<span class="token punctuation">.</span>hi\ng<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># hi tom</span>\n\nh <span class="token operator">=</span> C1<span class="token punctuation">.</span>hi\nh<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token comment"># hi tom</span></code></pre></div><p>即使把方法赋值给其他变量，解释器任会根据赋值情况正常执行。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;hi </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n\nc1 <span class="token operator">=</span> C1<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>\nc1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># hi tom</span>\n<span class="token comment"># 也可直接采用类的方式调用</span>\nC1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token comment"># hi tom </span></code></pre></div><p>甚至可以将方法定义在函数外。</p><div class="language-py"><pre><code><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;hi </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n   hi <span class="token operator">=</span> hi\n\n\nc1 <span class="token operator">=</span> C1<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 1. 实例调用</span>\nc1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># hi tom</span>\n\n<span class="token comment"># 2. 实例方法赋值给变量进行调用</span>\ng <span class="token operator">=</span> c1<span class="token punctuation">.</span>hi\ng<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># hi tom</span>\n\n<span class="token comment"># 3. 类调用</span>\nC1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>\n\n<span class="token comment"># 4. 类方法赋值给变量调用</span>\nh <span class="token operator">=</span> C1<span class="token punctuation">.</span>hi\nh<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token comment"># hi tom</span>\n\n<span class="token comment"># 5. 函数调用</span>\nhi<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token comment"># hi tom</span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意上述调用方式的区别，当采用实例方式调用，或者变量赋值为实例方法进行调用时， 解释器会自动注入实例，而采用类方式或者直接使用函数方式调用时则需手动传入实例变量。</p></div><h3 id="其他属性"><a class="header-anchor" href="#其他属性" aria-hidden="true">#</a> 其他属性</h3><h4 id="doc"><a class="header-anchor" href="#doc" aria-hidden="true">#</a> <strong>doc</strong></h4><p>类同样支持注释，可通过 <code>__doc__</code> 查看注释</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>\n   <span class="token triple-quoted-string string">&quot;&quot;&quot;类注释\n   示例类 C\n\n   test\n   &quot;&quot;&quot;</span>\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 类上访问</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>\n\n<span class="token comment"># 实例上访问</span>\nc1 <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>\n\n</code></pre></div><h4 id="class"><a class="header-anchor" href="#class" aria-hidden="true">#</a> <strong>class</strong></h4><p><code>__class__</code> 指向实例化对象的类。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>\n   <span class="token triple-quoted-string string">&quot;&quot;&quot;类注释\n   示例类 C\n\n   test\n   &quot;&quot;&quot;</span>\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> C<span class="token punctuation">)</span> <span class="token comment"># False</span>\n\nc1 <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> C<span class="token punctuation">)</span> <span class="token comment"># True</span>\n\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意类对象的 <code>__class__</code> 指向内部的对象，所以 <code>C.__class__ == C</code> 返回 false, 而 <code>c1</code> 由 <code>C</code> 实例化创建，所以 <code>c1.__class__ == C</code> 返回 True</p></div><h3 id="可迭代实例"><a class="header-anchor" href="#可迭代实例" aria-hidden="true">#</a> 可迭代实例</h3><p>为了使类变为可循环对象可以在内部定义 <code>__inter__</code> 方法，当使用 <code>for</code> 语句时，可使用</p><h2 id="知识点"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ul><li><p>[X] 类的语法</p><div class="language-"><pre><code>class ClassName:\n   &lt;statement-1&gt;\n   ...\n   &lt;statement-N&gt;\n</code></pre></div><ul><li>可以在类中使用 <code>if, for</code> 等语法</li><li>可以在类外定义成员函数</li><li>self 不是必须的只是一个惯常的约定</li><li>类对象 <ul><li>类属性</li><li>类方法</li><li><code>__init__(self)</code> 定义类初始化方法 <ul><li><code>__init__(self, arg1,...)</code> 定义类初始化传入参数</li><li><code>self.xx</code> 定义类实例属性</li></ul></li></ul></li><li>实例对象</li><li>采用 <code>类名()</code> 方式，实例化</li><li>实例属性可动态修改和删除</li><li>区分对象方法和类方法的区别 <ul><li>调用 <code>x.f</code> 等效于 <code>X.f(x)</code> 解释器处理了对象方调用和普通成员函数调用</li></ul></li><li>实例属性回覆盖类属性，若未定义实例属性会直接访问类属性</li><li>继承<div class="language-"><pre><code>class DerivedClassName(BaseClassName):\n  &lt;statement-1&gt;\n  ...\n  &lt;statement-n&gt;\n</code></pre></div>也可使用 <code>class DerivedClassName(modname.BaseClass)</code> 从其他模块引入基类 <ul><li>属性查找会从子类到基类</li><li>多态继承</li></ul></li><li>类的判断 <ul><li><code>isinstance</code></li><li><code>issubclass</code></li></ul></li></ul></li><li><p>约定采用 <code>_xx</code> 定义私有属性</p></li><li><p><code>Name mangling</code> 采用 <code>__方法名</code> 调用基类方法可以避免子类的覆盖导致的错误。</p></li><li><p>采用空类创建对象结构，相比字典更方便</p></li><li><p>使类变为可迭代对象</p><ul><li><code>__iter__</code></li><li><code>__next__</code></li></ul></li></ul>',41);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
