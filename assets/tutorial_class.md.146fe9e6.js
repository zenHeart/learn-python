import{o as n,c as s,d as a}from"./app.146ab500.js";const t='{"title":"类","description":"","frontmatter":{},"headers":[{"level":2,"title":"面向对象编程基础","slug":"面向对象编程基础"},{"level":2,"title":"类的定义","slug":"类的定义"},{"level":3,"title":"实例化","slug":"实例化"},{"level":3,"title":"_init_","slug":"init"},{"level":2,"title":"知识点","slug":"知识点"}],"relativePath":"tutorial/class.md","lastUpdated":1620547448086}',e={},p=a('<h1 id="类"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h1><h2 id="面向对象编程基础"><a class="header-anchor" href="#面向对象编程基础" aria-hidden="true">#</a> 面向对象编程基础</h2><h2 id="类的定义"><a class="header-anchor" href="#类的定义" aria-hidden="true">#</a> 类的定义</h2><p>采用如下语法定义类</p><div class="language-"><pre><code>class ClassName:\n   &lt;statement-1&gt;\n   ...\n   &lt;statement-n&gt;\n</code></pre></div><p>参看示例</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 直接调用类方法</span>\nC1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><h3 id="实例化"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h3><p>采用 <code>ClassName()</code> 方式实例化类</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span>\n   <span class="token comment"># self 表示实例化的类对象</span>\n   <span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>\n\nc1 <span class="token operator">=</span> C1<span class="token punctuation">(</span><span class="token punctuation">)</span>\nc1<span class="token punctuation">.</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>采用 c1.hi() 的方式调用类方法，解释器会按照C1.hi(c1) 的方式处理，所以一般在定义类的方法时，首个参数限定为实例自身，通常采用<code>self</code> 表示。</p></div><h3 id="init"><a class="header-anchor" href="#init" aria-hidden="true">#</a> <strong>init</strong></h3><p>通常会采用 <code>__init__</code> 方法，在实例化类时， 初始化类的相关参数。</p><div class="language-py"><pre><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>\n   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token comment"># 初始化实例对象的属性</span>\n      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n      self<span class="token punctuation">.</span>age <span class="token operator">=</span> age\n   <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> eat&quot;</span></span><span class="token punctuation">)</span>\n\n<span class="token comment"># 实例化 person 创建 tom 的信息</span>\ntom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age:</span><span class="token interpolation"><span class="token punctuation">{</span>tom<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment"># tom, age: 10</span>\ntom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># tom eat</span>\n\n<span class="token comment"># 实例化 person 创建 jack 的信息</span>\njack <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>jack<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age:</span><span class="token interpolation"><span class="token punctuation">{</span>jack<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment"># jack, age: 3</span>\njack<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># jack eat</span>\n</code></pre></div><h2 id="知识点"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ul><li>基础概念 <ul><li><code>namespace</code><ul><li>ptyhon 解释器启动时会创建内部命名空间，无法删除</li><li>全局命名空间在模块导入时创建</li><li>本地命名空间在函数申明时创建</li></ul></li><li><code>scope</code> 作用域是指可以直接访问的命名空间范围，为静态作用域 <ul><li>现在本地命名空间查找</li><li>全局命名空间查找</li><li>内建命名空间查找</li><li><code>nonlocal</code> 查找非本地空间变量</li><li>class 定义有独立的命名空间</li><li>无 <code>global, nonlocal</code> 时，赋值语句永远在 <code>最内层的命名空间</code>，赋值语句只用于绑定名称到命名空间。</li><li><code>import，函数定义</code> 绑定命名空间在内层</li><li>示例说明 <code>nonlocal, global</code> 对作用域的影响</li><li></li></ul></li><li><code>.</code> 引用的内容都成称为属性 <ul><li>可写的属性可以采用 <code>del</code> 删除</li></ul></li></ul></li><li>类语法 <ul><li>申明类, 会创建一个新的本地命名空间</li></ul><div class="language-"><pre><code>class ClassName:\n   &lt;statement-1&gt;\n   ...\n   &lt;statement-N&gt;\n</code></pre></div><ul><li>可以在类中使用 <code>if, for</code> 等语法</li><li>可以在类外定义成员函数</li><li>self 不是必须的只是一个惯常的约定</li><li>类对象 <ul><li>类属性</li><li>类方法</li><li><code>__init__(self)</code> 定义类初始化方法 <ul><li><code>__init__(self, arg1,...)</code> 定义类初始化传入参数</li><li><code>self.xx</code> 定义类实例属性</li></ul></li></ul></li><li>实例对象</li><li>采用 <code>类名()</code> 方式，实例化</li><li>实例属性可动态修改和删除</li><li>区分对象方法和类方法的区别 <ul><li>调用 <code>x.f</code> 等效于 <code>X.f(x)</code> 解释器处理了对象方调用和普通成员函数调用</li></ul></li><li>实例属性回覆盖类属性，若未定义实例属性会直接访问类属性</li><li>继承<div class="language-"><pre><code>class DerivedClassName(BaseClassName):\n  &lt;statement-1&gt;\n  ...\n  &lt;statement-n&gt;\n</code></pre></div>也可使用 <code>class DerivedClassName(modname.BaseClass)</code> 从其他模块引入基类 <ul><li>属性查找会从子类到基类</li><li>多态继承</li></ul></li><li>类的判断 <ul><li><code>isinstance</code></li><li><code>issubclass</code></li></ul></li></ul></li><li>约定采用 <code>_xx</code> 定义私有属性</li><li><code>Name mangling</code> 采用 <code>__方法名</code> 调用基类方法可以避免子类的覆盖导致的错误。</li><li>采用空类创建对象结构，相比字典更方便</li><li>使类变为可迭代对象 <ul><li><code>__iter__</code></li><li><code>__next__</code></li></ul></li></ul>',16);e.render=function(a,t,e,o,l,c){return n(),s("div",null,[p])};export default e;export{t as __pageData};
