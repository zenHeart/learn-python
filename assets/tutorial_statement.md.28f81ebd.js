import{o as n,c as s,d as a}from"./app.146ab500.js";const t='{"title":"语句","description":"","frontmatter":{},"headers":[{"level":2,"title":"条件判断","slug":"条件判断"},{"level":3,"title":"if","slug":"if"},{"level":3,"title":"else","slug":"else"},{"level":3,"title":"elif","slug":"elif"},{"level":2,"title":"循环","slug":"循环"},{"level":3,"title":"for","slug":"for"},{"level":3,"title":"while","slug":"while"},{"level":3,"title":"break","slug":"break"},{"level":3,"title":"continue","slug":"continue"},{"level":2,"title":"错误捕获","slug":"错误捕获"},{"level":3,"title":"try","slug":"try"},{"level":3,"title":"exception","slug":"exception"},{"level":3,"title":"finally","slug":"finally"},{"level":2,"title":"存疑","slug":"存疑"},{"level":2,"title":"知识点","slug":"知识点"}],"relativePath":"tutorial/statement.md","lastUpdated":1620547448086}',p={},e=a('<h1 id="语句"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h1><h2 id="条件判断"><a class="header-anchor" href="#条件判断" aria-hidden="true">#</a> 条件判断</h2><h3 id="if"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h3><p>利用形如</p><div class="language-"><pre><code>if 表达式:\n  语句块\n</code></pre></div><p>申明 if 语句示例判断输入是否为偶数</p><div class="language-py"><pre><code>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;enter a number: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;a is even number&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="else"><a class="header-anchor" href="#else" aria-hidden="true">#</a> else</h3><p>采用 else 表示额外的分支逻辑</p><div class="language-py"><pre><code>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;enter a number: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;a is even number&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;a is odd number&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="elif"><a class="header-anchor" href="#elif" aria-hidden="true">#</a> elif</h3><p>采用 elif 实现多分支判断</p><div class="language-py"><pre><code>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;enter a number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;negative number&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">elif</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;zero&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;positive&quot;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="循环"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h3 id="for"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><p>利用 for 循环 list 结构</p><div class="language-py"><pre><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre></div><h3 id="while"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h3><p>可以采用 while 实现逻辑判断循环。 采用 while 循环 list</p><div class="language-py"><pre><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\ni <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    i<span class="token operator">+=</span><span class="token number">1</span>\n\n</code></pre></div><h3 id="break"><a class="header-anchor" href="#break" aria-hidden="true">#</a> break</h3><p>可以利用 break 实现跳出循环</p><div class="language-py"><pre><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\ni <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;first element greater 2 index: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    <span class="token comment"># jump to loop</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  i<span class="token operator">+=</span><span class="token number">1</span>\n</code></pre></div><h3 id="continue"><a class="header-anchor" href="#continue" aria-hidden="true">#</a> continue</h3><p>break 会跳出整个 <code>for 或 while</code> 语句，若只期望 某次循环的后续执行内容，可使用 continue。</p><div class="language-py"><pre><code><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;even number: &quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n      <span class="token keyword">continue</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;this code never execute&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;odd number: &quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n</code></pre></div><h2 id="错误捕获"><a class="header-anchor" href="#错误捕获" aria-hidden="true">#</a> 错误捕获</h2><h3 id="try"><a class="header-anchor" href="#try" aria-hidden="true">#</a> try</h3><p>利用 try 捕获错误，except 中处理错误逻辑</p><div class="language-py"><pre><code><span class="token keyword">try</span><span class="token punctuation">:</span>\n    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;x is illegal number&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">except</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Oops!  That was no valid number.&quot;</span><span class="token punctuation">)</span></code></pre></div><h3 id="exception"><a class="header-anchor" href="#exception" aria-hidden="true">#</a> exception</h3><h3 id="finally"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h3><div class="language-py"><pre><code><span class="token keyword">try</span><span class="token punctuation">:</span>\n    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;x is illegal number&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">except</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Oops!  That was no valid number.&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">finally</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;over&quot;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="存疑"><a class="header-anchor" href="#存疑" aria-hidden="true">#</a> 存疑</h2><ul><li>[ ] for 语句中 else 语句的作用？？？</li><li>[ ] exception 的细分处理和示例</li><li>[ ] finally 的作用</li></ul><h2 id="知识点"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ul><li><p>if 语句结构</p><div class="language-"><pre><code>if_stmt ::=  &quot;if&quot; assignment_expression &quot;:&quot; suite\n           (&quot;elif&quot; assignment_expression &quot;:&quot; suite)*\n           [&quot;else&quot; &quot;:&quot; suite]\n</code></pre></div></li><li><p>for 语句</p><div class="language-"><pre><code>for_stmt ::=  &quot;for&quot; target_list &quot;in&quot; expression_list &quot;:&quot; suite\n              [&quot;else&quot; &quot;:&quot; suite]\n</code></pre></div></li><li><p>try 语句</p><div class="language-"><pre><code>try_stmt  ::=  try1_stmt | try2_stmt\ntry1_stmt ::=  &quot;try&quot; &quot;:&quot; suite\n              (&quot;except&quot; [expression [&quot;as&quot; identifier]] &quot;:&quot; suite)+\n              [&quot;else&quot; &quot;:&quot; suite]\n              [&quot;finally&quot; &quot;:&quot; suite]\ntry2_stmt ::=  &quot;try&quot; &quot;:&quot; suite\n              &quot;finally&quot; &quot;:&quot; suite\n</code></pre></div></li><li><p>range(n) 定义一个循环迭代</p><ul><li>range(x, y) 定义一个范围的迭代</li><li>range(start,end,step) 定义步长迭代</li></ul></li><li><p>else 只在 for 循环耗尽或 while 判断为空时执行，而非 break 状态。素数判断逻辑</p></li><li><p>pass 表示空语句</p><ul><li>完成一个语句的正常结构</li><li>空类</li><li>函数占位，表示代办</li></ul></li></ul>',37);p.render=function(a,t,p,o,l,c){return n(),s("div",null,[e])};export default p;export{t as __pageData};
