import{o as n,c as s,d as a}from"./app.146ab500.js";const t='{"title":"类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"Numbers","slug":"numbers"},{"level":3,"title":"数值运算","slug":"数值运算"},{"level":3,"title":"数值类型","slug":"数值类型"},{"level":3,"title":"浮点精度","slug":"浮点精度"},{"level":2,"title":"Strings","slug":"strings"},{"level":3,"title":"转义字符","slug":"转义字符"},{"level":3,"title":"字符串操作","slug":"字符串操作"},{"level":3,"title":"字符串切片","slug":"字符串切片"},{"level":2,"title":"Lists","slug":"lists"},{"level":2,"title":"知识点","slug":"知识点"}],"relativePath":"tutorial/types.md","lastUpdated":1623448101174}',p={},e=a('<h1 id="类型"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h1><h2 id="numbers"><a class="header-anchor" href="#numbers" aria-hidden="true">#</a> Numbers</h2><h3 id="数值运算"><a class="header-anchor" href="#数值运算" aria-hidden="true">#</a> 数值运算</h3><p>数值计算中，常见运算符如下:</p><ul><li><code>+</code></li><li><code>-</code></li><li><code>*</code></li><li><code>/</code></li><li><code>//</code> 向下取整除法</li><li><code>**</code> 幂运算</li><li><code>()</code> 表示分组</li></ul><p>在 <a href="./begin.html#REPL">REPL</a> 模式下，执行如下语句</p><div class="language-py"><pre><code><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token comment"># 4</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token comment"># 0</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment"># 6</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment"># 0.6666...</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 0，0.66... 向下取整返回 0</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 8，幂运算类似 2^3</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 1， 因为乘法优先级高于减法</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token comment"># 16，采用 () 分组，先计算 ( 5 - 1),在乘以 4 </span></code></pre></div><h3 id="数值类型"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h3><p>除了整数，python 还支持浮点，复数和其他进制表示法。</p><ul><li>浮点用来表示包含小数的数值，采用 <code>.</code> 来分隔整数和小数部分，例如 <code>11.1</code>,<code>10.2</code></li><li>可采用 <code>_</code> 来分隔数值，例如 <code>1_000_000</code> 的形式来表示大整数</li><li>也可采用 <a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95/1612882?fromtitle=%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95&amp;fromid=756685&amp;fr=aladdin" target="_blank" rel="noopener noreferrer">科学计数法</a> 表示大整数，例如 <code>1.2e10</code> 表示 <code>12_000_000_000</code></li><li>采用 <code>j,J</code> 来表示复数的虚部，例如 <code>3 + 1j</code>，<code>3</code> 为实部，<code>1j</code> 为虚部 <strong>注意虚部前缀必须包含数值，直接写 <code>3 + j</code> 非法。运算符对复数计算也有效</strong></li><li>通过添加 <code>0&lt;进制标识&gt;</code> 的形式，来表示其他进制，例如 <ul><li><code>012</code> 表示 10 进制，python 默认采用 10 进制，所以前导 0 可忽略</li><li><code>0b,0B</code> 表示二进制，例如 <code>0b10</code> 表示 10 进制 2</li><li><code>0o,0O</code> 表示八进制，例如 <code>0o10</code> 表示 10 进制 8</li><li><code>0x,0x</code> 表示十六进制，例如 <code>0x10</code> 表示 10 进制 16</li></ul></li></ul><p>在 <a href="./begin.html#REPL">REPL</a> 模式下，执行如下语句，熟悉进制表示</p><div class="language-py"><pre><code><span class="token comment"># 浮点数</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1.1</span> <span class="token operator">+</span> <span class="token number">1.2</span><span class="token punctuation">)</span> <span class="token comment"># 1.3</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.23</span><span class="token punctuation">)</span> <span class="token comment"># -0.23</span>\n\n\n<span class="token comment"># 科学计数法 </span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1e5</span><span class="token punctuation">)</span> <span class="token comment"># 100000</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1.1e-2</span><span class="token punctuation">)</span> <span class="token comment"># 0.011</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1.22e3</span><span class="token punctuation">)</span> <span class="token comment"># 1220.0</span>\n\n<span class="token comment"># 复数运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1j</span> <span class="token operator">+</span> <span class="token number">1j</span><span class="token punctuation">)</span> <span class="token comment"># 2j</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1j</span> <span class="token operator">-</span> <span class="token number">1j</span><span class="token punctuation">)</span> <span class="token comment"># 0j</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1j</span> <span class="token operator">*</span> <span class="token number">1j</span><span class="token punctuation">)</span> <span class="token comment"># -1 + 0j</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1j</span> <span class="token operator">/</span> <span class="token number">1j</span><span class="token punctuation">)</span> <span class="token comment"># 1 + 0j</span>\n\n\n<span class="token comment"># 0b,0B 表示 二进制表示</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b10</span><span class="token punctuation">,</span> <span class="token number">0B1011</span><span class="token punctuation">)</span> <span class="token comment"># 2 11</span>\n<span class="token comment"># 0o,0O 表示八进制表示</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0o1</span><span class="token punctuation">,</span> <span class="token number">0O1</span><span class="token punctuation">)</span> <span class="token comment"># 1 1</span>\n<span class="token comment"># 0x,0X 表示 十六进制</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token comment"># 1 1</span>\n\n<span class="token comment"># 采用 _ 分隔数据</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>1_000_000<span class="token punctuation">)</span> <span class="token comment"># 1000000</span>\n<span class="token comment"># 支持其他进制</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>0b0000_1000<span class="token punctuation">)</span> <span class="token comment"># 8</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>0o000_100<span class="token punctuation">)</span> <span class="token comment"># 64</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>0x00_ff<span class="token punctuation">)</span> <span class="token comment"># 255</span></code></pre></div><h3 id="浮点精度"><a class="header-anchor" href="#浮点精度" aria-hidden="true">#</a> 浮点精度</h3><p>由于计算机采用二进制表示实际数值，浮点数据的表示会存在差距，所以 <code>0.1 + 0.1 + 0.1 == 0.3</code> 会返回 false, 注意此类问题。</p><div class="language-py"><pre><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment"># False</span></code></pre></div><h2 id="strings"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> Strings</h2><p>采用单引号 <code>&#39;&lt;内容&gt;&#39;</code> 或双引号 <code>&quot;&lt;内容&gt;&quot;</code> 定义字符串。</p><div class="language-py"><pre><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span> <span class="token comment"># hello world!</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span> <span class="token comment"># hello world!</span>\n<span class="token comment"># 嵌套使用单双引号，注意反斜杠表示转义字符</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;Isn\\&#39;t,&quot; they said.&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &quot;Isn\\&#39;t,&quot; they said.</span>\n</code></pre></div><p>可采用 <code>&quot;&quot;&quot;&lt;内容&gt;&quot;&quot;&quot;</code> 的方式定义多行文本</p><div class="language-py"><pre><code><span class="token comment"># 定义多行文本</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;\\\nUsage: thingy [OPTIONS]\n     -h                        Display this usage message\n     -H hostname               Hostname to connect to\n&quot;&quot;&quot;</span><span class="token punctuation">)</span></code></pre></div><h3 id="转义字符"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h3><p>转义字符用于表示不可直接显示的内容例如换行，缩进等。 常采用 <code>\\转义符</code> 的方式表示。常见的转义符如下</p><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>\\n</code></td><td style="text-align:left;">回车</td></tr><tr><td style="text-align:left;"><code>\\t</code></td><td style="text-align:left;">tab 缩进</td></tr><tr><td style="text-align:left;"><code>\\\\</code></td><td style="text-align:left;">表示 <code>\\</code></td></tr></tbody></table><div class="language-py"><pre><code><span class="token comment"># \\n 换行符, 返回</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;test\\nbreak line&#39;</span><span class="token punctuation">)</span> \n\n<span class="token comment"># \\t tab 缩进</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello\\tworld!&quot;</span><span class="token punctuation">)</span> <span class="token comment"># hello   world!</span>\n\n<span class="token comment"># \\\\ 表示 \\\\</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \\</span>\n</code></pre></div><p>为了避免 <code>\\</code> 转义可采用 <code>r&lt;字符串&gt;</code> 的模式阻止转义。</p><div class="language-py"><pre><code><span class="token comment"># r 阻止转义</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;test\\nbreak line&#39;</span><span class="token punctuation">)</span> <span class="token comment"># test\\nbreak line</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&quot;hello\\tworld!&quot;</span><span class="token punctuation">)</span> <span class="token comment"># hello\\tworld!</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;\\\\&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \\\\</span></code></pre></div><h3 id="字符串操作"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h3><ul><li>可采用 <code>&lt;字符串&gt;*n</code> 的方式重复某个字符串内容 n 次，n 为正整数</li><li>可采用 <code>&lt;字符串&gt; + &lt;字符串1&gt; + ...</code> 的方式连接多个字符串 <ul><li>也可直接使用 <code>&lt;字符串&gt; &lt;字符串1&gt; ...</code> 方式合并字符串</li></ul></li></ul><div class="language-py"><pre><code><span class="token comment"># 字符串*n 重复字符串内容 n 次</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ba&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;na&#39;</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># banana</span>\n<span class="token comment"># 字符串 + 字符串1 + ... 合并字符串</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ba&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;na&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;na&#39;</span><span class="token punctuation">)</span> <span class="token comment"># banana</span>\n<span class="token comment"># 也可省略 + 号</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ba&#39;</span> <span class="token string">&#39;na&#39;</span> <span class="token string">&quot;na&quot;</span><span class="token punctuation">)</span> <span class="token comment"># banana</span></code></pre></div><h3 id="字符串切片"><a class="header-anchor" href="#字符串切片" aria-hidden="true">#</a> 字符串切片</h3><p>可以采用 <code>[n]</code> 的方式索引单个字符 n 也可以为负值，和字符串对应关系如下</p><div class="language-"><pre><code> +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n</code></pre></div><div class="language-py"><pre><code><span class="token comment"># 字符串[索引] 返回单个字符</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># p</span>\n\n<span class="token comment"># 也可采用变量索引</span>\na <span class="token operator">=</span> <span class="token string">&#39;python&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># p</span>\n\n<span class="token comment"># -1 表示最后一个字符</span>\na <span class="token operator">=</span> <span class="token string">&#39;python&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># n</span>\n\n</code></pre></div><p>也可采用形如 <code>[start:end]</code> 的方式提取一个字符串片段。<code>start,end</code> 均为可选且支持负值，表示提取从 <code>start</code> 开始长度为 <code>end - start</code> 的字符，注意当 <code>end</code> 为负数时，可将 start 根据索引关系转换为负数处理。</p><div class="language-py"><pre><code><span class="token comment"># extract string </span>\na <span class="token operator">=</span> <span class="token string">&#39;python&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># py</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># o</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># python</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># pytho</span>\n\n<span class="token comment"># 不报错，返回空</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment"># 范围包含整个字符，取所有字符</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># python</span></code></pre></div><p>可以用 len 方法获取字符串长度</p><div class="language-py"><pre><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&#39;banana&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 6</span></code></pre></div><h2 id="lists"><a class="header-anchor" href="#lists" aria-hidden="true">#</a> Lists</h2><h2 id="知识点"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2>',39);p.render=function(a,t,p,o,c,l){return n(),s("div",null,[e])};export default p;export{t as __pageData};
